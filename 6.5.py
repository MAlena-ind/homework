# 5)	Реализовать класс Stationery (канцелярская принадлежность).
# Определить в нем атрибут title (название) и метод draw (отрисовка).
# Метод выводит сообщение “Запуск отрисовки.” Создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер).
#     В каждом из классов реализовать переопределение метода draw.
#     Для каждого из классов метод должен выводить уникальное сообщение.
#     Создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.




class Stationery():
    """Инициализация атрибута Название канцелярской принадлежности"""
    def __init__(self, title):
        self.title = title

    def draw(self):
        print('Запуск отрисовки')

"""Реализованы дочерние ручка и карандаш. Маркер не сделала, торопилась"""

class Pen(Stationery):
    """Инициализация атрибутов ручки: атрибут канцелярской принадлежности остается + добавим цвет"""
    def __init__(self, title, color):
        super().__init__(title)
        self.color = color

    def draw(self):
        """Переопределение родительского метода"""
        print('Рисование домика. Цвет {}.'.format(self.color))


class Pencil(Stationery):
    """Инициализация атрибутов карандаша: атрибут канцелярской принадлежности остается + добавим цветной или нет (булевое"""
    def __init__(self, title, colorful=False):
        super().__init__(title)
        self.colorful=colorful

    def draw(self):
        """Переопределение родительского метода"""
        if self.colorful:
            print(self.title, ' - цветной карандаш для разукрашивания.')
        else:
            print(self.title,' - простой карандаш для контуринга.')



"""Проверяем"""
pen = Pen('Ручка шариковая', 'Синяя паста')
pen.draw() # Вывод: Рисование домика. Цвет Синяя паста.

pencil_1 = Pencil('Карандаш "Волшебник"', True)
pencil_1.draw()  # Вывод: Карандаш "Волшебник"  - цветной карандаш для разукрашивания.


pencil_2 = Pencil('Карандаш "Чертежник"')
pencil_2.draw()  # Карандаш "Чертежник"  - простой карандаш для контуринга.
